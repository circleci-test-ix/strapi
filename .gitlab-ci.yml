# image: docker:latest

# variables:
#    # When using dind service we need to instruct docker, to talk with the
#    # daemon started inside of the service. The daemon is available with
#    # a network connection instead of the default /var/run/docker.sock socket.
#    #
#    # The 'docker' hostname is the alias of the service container as described at
#    # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
#    #
#    # Note that if you're using the Kubernetes executor, the variable should be set to
#    # tcp://localhost:2375/ because of how the Kubernetes executor connects services
#    # to the job container
#    # DOCKER_HOST: tcp://localhost:2375/
#    #
#    # For non-Kubernetes executors, we use tcp://docker:2375/
#    DOCKER_HOST: tcp://docker:2375/
#    # When using dind, it's wise to use the overlayfs driver for
#    # improved performance.
#    DOCKER_DRIVER: overlay2

# services:
#   - docker:dind

# before_script:
#   - apk add --no-cache --quiet py-pip
#   - pip install --quiet docker-compose~=1.23.0

# build:
#   stage: build
#   script:
#     - docker-compose -v
#     - docker-compose build buildkite_ci
#     - docker-compose run --rm buildkite_ci bash ci.sh


# This file is a template, and might need editing before it works on your project.
# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:10

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service

variables:
  # Configure mysql environment variables (https://hub.docker.com/_/mysql/)
  MYSQL_ROOT_PASSWORD: 'rootpw'
  MYSQL_DATABASE: 'strapi_test'
  MYSQL_USER: 'ci'
  MYSQL_PASSWORD: 'passw0rd'

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
# cache:
#   paths:
#     - node_modules/

build:
  stage: build
  script:
    - echo "*** STARTING Build `date` ***"
    - yarn setup
    - echo "*** FINSHED Build `date` ***"
  artifacts:
    paths:
      - ./

unit_test:
  stage: e2e_test
  script:
    - echo "*** STARTING Lint and Unit Tests `date` ***"
    - yarn run -s lint
    - yarn run -s test:unit
    - yarn run -s test:front
    - echo "*** FINISHED Lint and Unit Tests `date` ***"
  dependencies:
    - build

postgres_test:
  services:
    - postgres:latest
  stage: e2e_test
  script:
    # Postgres
    - echo "*** STARTING Postgres Tests `date` ***"
    - apt-get update && apt-get install -y postgresql-client
    - psql -c 'create database strapi_test;' -U postgres -h postgres -p 5432
    - yarn run -s test:generate-app -- '--dbclient=postgres --dbhost=postgres --dbport=5432 --dbname=strapi_test --dbusername=postgres --dbpassword='
    - yarn run -s test:start-app & ./node_modules/.bin/wait-on http://localhost:1337
    - yarn run -s test:e2e      
    - echo "*** FINISHED Postgres Tests `date` ***"
  dependencies:
    - build

mysql_test:
  services:
    - name: mysql:latest
      command: [--default-authentication-plugin=mysql_native_password]
  stage: e2e_test
  script:
    # MySQL
    - echo "*** STARTING MySQL Tests `date` ***"
    - apt-get update && apt-get install -y mysql-client
    - yarn run -s test:generate-app -- '--dbclient=mysql --dbhost=mysql --dbport=3306 --dbname=strapi_test --dbusername=ci --dbpassword=passw0rd'
    - yarn run -s test:start-app & ./node_modules/.bin/wait-on http://localhost:1337
    - yarn run -s test:e2e
    - echo "*** FINISHED MySQL Tests `date` ***"
  dependencies:
    - build

sqllite_test:
  stage: e2e_test
  script:
    # SQL Lite
    - echo "*** STARTING SQLLite Tests `date` ***"
    - yarn run -s test:generate-app -- '--dbclient=sqlite --dbfile=./tmp/data.db'
    - yarn run -s test:start-app & ./node_modules/.bin/wait-on http://localhost:1337
    - yarn run -s test:e2e
    - echo "*** FINISHED SQLLite Tests `date` ***"
  dependencies:
    - build
    
mongo_test:
  services:
    - mongo:latest
  stage: e2e_test
  script:
    # Mongo
    - echo "*** STARTING Mongo Tests `date` ***"
    - yarn run -s test:generate-app -- '--dbclient=mongo --dbhost=mongo --dbport=27017 --dbname=strapi_test --dbusername= --dbpassword='
    - yarn run -s test:start-app & ./node_modules/.bin/wait-on http://localhost:1337
    - yarn run -s test:e2e
    - echo "*** FINISHED Mongo Tests `date` ***"
  dependencies:
    - build

stages:
  - build
  # - unit_test
  - e2e_test